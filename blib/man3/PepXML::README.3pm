.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "README 3"
.TH README 3 "2015-05-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PepXML::Parser \- A Perl parser for the PepXML file format.
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Quick summary of what the module does.
.PP
.Vb 1
\&    my $parser = PepXML::Parser\->new();
\&
\&    my $pepxml = $p\->parse("sample.pepxml");
\&    
\&    my %msms = $pepxml\->get_msms_pipeline_analysis();
\&    
\&    my @proteins = $pepxml\->get_proteins();
\&    
\&    my @peptides = $pepxml\->get_unique_peptides();
\&    
\&    ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
pepXML is an open data format developed at the SPC/Institute for Systems biology for the storage, exchange, and processing of peptide 
sequence assignments of \s-1MS/MS\s0 scans. pepXML is intended to provide a common data output format for many different \s-1MS/MS\s0 search engines and 
subsequent peptide-level analyses. Several search engines already have native support for outputting pepXML and converters are available 
to transform output files to pepXML.
.SH "Data Structure & Access"
.IX Header "Data Structure & Access"
Once the file is parsed, a deeply nested data strcuture is organized in memory, with all the information stored inside the the top level class
called PepXML::PepXMLFile. Use the public methods described bellow in order to acces the data.
.PP
.Vb 10
\&    PepXML::PepXMLFile  {
\&        Parents       Moose::Object
\&        public methods (17) : get_enzymes, get_hits, get_modifications, get_msms_pipeline_analysis, get_parameters, get_peptides, get_proteins, 
\&        get_run_summary, get_search_summary, get_unique_peptides, get_unique_proteins, meta, msms_pipeline_analysis, msms_run_summary, 
\&        sample_enzyme, search_hit, search_summary
\&        private methods (0)
\&        internals: {
\&            msms_pipeline_analysis   PepXML::MsmsPipelineAnalysis,
\&            msms_run_summary         PepXML::RunSummary,
\&            sample_enzyme            [
\&                [0] PepXML::Enzyme
\&            ],
\&            search_hit               [
\&                [0]  PepXML::SearchHit,
\&                [1]  PepXML::SearchHit,
\&                [2]  PepXML::SearchHit,
\&                [3]  PepXML::SearchHit,
\&                [4]  PepXML::SearchHit,
\&                [5]  PepXML::SearchHit,
\&                ...
\&            ],
\&            search_summary           PepXML::SearchSummary
\&        }
.Ve
.SS "Public Methods"
.IX Subsection "Public Methods"
\fIget_msms_pipeline_analysis\fR
.IX Subsection "get_msms_pipeline_analysis"
.PP
Return type: hash.
.PP
.Vb 1
\&    my %msms = $pepxml\->get_msms_pipeline_analysis();
.Ve
.PP
Data access:
.PP
.Vb 7
\&    {
\&    date                   "2015\-04\-09T18:54:11",
\&    summary_xml            "/Adult_Adrenalgland_Gel_Elite_49_f01.pep.xml",
\&    xmlns                  "http://regis\-web.systemsbiology.net/pepXML",
\&    xmlns_schemaLocation   "http://sashimi.sourceforge.net/schema_revision/pepXML/pepXML_v117.xsd",
\&    xmlns_xsi              "http://www.w3.org/2001/XMLSchema\-instance"
\&    }
.Ve
.PP
\fIget_enzymes\fR
.IX Subsection "get_enzymes"
.PP
Return tupe: array.
.PP
.Vb 1
\&    my @enzymes = $pepxml\->get_enzymes();
.Ve
.PP
Data access:
.PP
.Vb 11
\&    [0] PepXML::Enzyme  {
\&        Parents       Moose::Object
\&        public methods (5) : cut, meta, name, no_cut, sense
\&        private methods (0)
\&        internals: {
\&            cut      "KR",
\&            name     "Trypsin",
\&            no_cut   "P",
\&            sense    "C"
\&        }
\&    }
.Ve
.PP
\fI\fIget_run_summary()\fI\fR
.IX Subsection "get_run_summary()"
.PP
Return type: PepXML::RunSummary Object.
.PP
.Vb 1
\&    my $summary = $pepxml\->get_run_summary();
.Ve
.PP
Data access:
.PP
.Vb 12
\&    PepXML::RunSummary  {
\&        Parents       Moose::Object
\&        public methods (6) : base_name, meta, msManufacturer, msModel, raw_data, raw_data_type
\&        private methods (0)
\&        internals: {
\&            base_name        "Sample",
\&            msManufacturer   "Thermo Scientific",
\&            msModel          "LTQ Orbitrap Elite",
\&            raw_data         ".mzXML",
\&            raw_data_type    "raw"
\&        }
\&    }
.Ve
.PP
\fI\fIget_search_summary()\fI\fR
.IX Subsection "get_search_summary()"
.PP
Return Type: PepXML::SearchSummary Object.
.PP
PepXML::SearchSummary is a complex object, some internal methods are accessors to other objects, like the aminoacid_modification
for example.
.PP
.Vb 1
\&    my $search_summary = $pepxml\->get_search_summary();
.Ve
.PP
Data access:
.PP
.Vb 10
\&    PepXML::SearchSummary  {
\&        Parents       Moose::Object
\&        public methods (11) : aminoacid_modification, base_name, enzymatic_search_constraint, fragment_mass_type, meta, parameter, precursor_mass_type, search_database, search_engine, search_engine_version, search_id
\&        private methods (0)
\&        internals: {
\&            aminoacid_modification        [
\&                [0] PepXML::AAModification,
\&                [1] PepXML::AAModification
\&            ],
\&            base_name                     "/Adult_Adrenalgland_Gel_Elite_49_f01",
\&            enzymatic_search_constraint   PepXML::EnzSearchConstraint,
\&            fragment_mass_type            "monoisotopic",
\&            parameter                     [
\&                [0]  PepXML::Parameter,
\&                [1]  PepXML::Parameter,
\&                [2]  PepXML::Parameter,
\&                [3]  PepXML::Parameter,
\&                [4]  PepXML::Parameter,
\&                [5]  PepXML::Parameter,
\&                ...
\&            ],
\&            precursor_mass_type           "monoisotopic",
\&            search_database               PepXML::SearchDatabase,
\&            search_engine                 "Comet",
\&            search_engine_version         "2015.01 rev. 1",
\&            search_id                     1
\&        }
\&    }
.Ve
.PP
\fI\fIget_modifications()\fI\fR
.IX Subsection "get_modifications()"
.PP
Return Type: array of PepXML::AAModification objects.
.PP
.Vb 1
\&    my @mods = $pepxml\->get_modifications();
.Ve
.PP
Data access:
.PP
.Vb 10
\&    [0] PepXML::AAModification  {
\&        Parents       Moose::Object
\&        public methods (6) : aminoacid, mass, massdiff, meta, symbol, variable
\&        private methods (0)
\&        internals: {
\&            aminoacid   "M",
\&            mass        147.035385,
\&            massdiff    15.994900,
\&            symbol      "*",
\&            variable    "Y"
\&        }
\&    },
\&    [1] PepXML::AAModification  {
\&        Parents       Moose::Object
\&        public methods (6) : aminoacid, mass, massdiff, meta, symbol, variable
\&        private methods (0)
\&        internals: {
\&            aminoacid   "C",
\&            mass        160.030649,
\&            massdiff    57.021464,
\&            symbol      "",
\&            variable    "N"
\&        }
\&    }
.Ve
.PP
\fI\fIget_parameters()\fI\fR
.IX Subsection "get_parameters()"
.PP
Return Type: array of PepXML::Parameter objects.
.PP
.Vb 1
\&    my @params = $pepxml\->get_parameters();
.Ve
.PP
Data access:
.PP
.Vb 10
\&    [0] PepXML::Parameter  {
\&        Parents       Moose::Object
\&        public methods (3) : meta, name, value
\&        private methods (0)
\&        internals: {
\&            name    "# comet_version ",
\&            value   2015.01
\&        }
\&    },
\&    [1] PepXML::Parameter  {
\&        Parents       Moose::Object
\&        public methods (3) : meta, name, value
\&        private methods (0)
\&        internals: {
\&            name    "activation_method",
\&            value   "ALL"
\&        }
\&    },
\&    ...
.Ve
.PP
\fI\fIget_db_info()\fI\fR
.IX Subsection "get_db_info()"
.PP
Return type: PepXML::SearchDatabase object.
.PP
.Vb 1
\&    my $db = $pepxml\->get_db_info;
.Ve
.PP
Data access:
.PP
.Vb 9
\&    PepXML::SearchDatabase  {
\&        Parents       Moose::Object
\&        public methods (3) : local_path, meta, type
\&        private methods (0)
\&        internals: {
\&            local_path   "Ens78plusREV_plusPeps.fa",
\&            type         "AA"
\&        }
\&    }
.Ve
.PP
\fI\fIget_hits()\fI\fR
.IX Subsection "get_hits()"
.PP
Return type: array of PepXML::SearchHit objects.
.PP
.Vb 1
\&    my @hits = $pepxml\->get_hits();
.Ve
.PP
Data access:
.PP
.Vb 10
\&    [0] PepXML::SearchHit  {
\&        Parents       Moose::Object
\&        public methods (22) : assumed_charge, calc_neutral_pep_mass, end_scan, hit_rank, index, massdiff, meta, num_matched_ions, num_matched_peptides, num_missed_cleavages, num_tol_term, num_tot_proteins, peptide, peptide_next_aa, peptide_prev_aa, precursor_neutral_mass, protein, retention_time_sec, search_score, spectrum, start_scan, tot_num_ions
\&        private methods (0)
\&        internals: {
\&            assumed_charge           3,
\&            calc_neutral_pep_mass    1118.485333,
\&            end_scan                 517,
\&            hit_rank                 5,
\&            index                    9,
\&            massdiff                 0.005685,
\&            num_matched_ions         12,
\&            num_matched_peptides     3916,
\&            num_missed_cleavages     0,
\&            num_tol_term             2,
\&            num_tot_proteins         2,
\&            peptide                  "DSGHPGHAEGR",
\&            peptide_next_aa          "E",
\&            peptide_prev_aa          "R",
\&            precursor_neutral_mass   1118.491019,
\&            protein                  "ENSP00000374387",
\&            retention_time_sec       572.8,
\&            search_score             {
\&                deltacn       0.009,
\&                deltacnstar   0.000,
\&                expect        2.14E+01,
\&                sprank        46,
\&                spscore       172.1,
\&                xcorr         0.961
\&            },
\&            spectrum                 "Adult_Adrenalgland_Gel_Elite_49_f01.00517.00517.3",
\&            start_scan               517,
\&            tot_num_ions             40
\&        }
\&    }
.Ve
.PP
\fI\fIget_proteins()\fI\fR
.IX Subsection "get_proteins()"
.PP
Return type: array
.PP
.Vb 1
\&    $pepxml\->get_proteins();
.Ve
.PP
\fI\fIget_unique_proteins()\fI\fR
.IX Subsection "get_unique_proteins()"
.PP
Return type: array
.PP
.Vb 1
\&    $pepxml\->get_unique_proteins();
.Ve
.PP
\fI\fIget_peptides()\fI\fR
.IX Subsection "get_peptides()"
.PP
Return type: array
.PP
.Vb 1
\&    $pepxml\->get_peptides();
.Ve
.PP
\fI\fIget_unique_peptides()\fI\fR
.IX Subsection "get_unique_peptides()"
.PP
Return type: array
.PP
.Vb 1
\&    $pepxml\->get_unique_peptides();
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Felipe da Veiga Leprevost, \f(CW\*(C`<leprevost at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-pepxml\-parser at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=PepXML\-Parser>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc PepXML::Parser
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=PepXML\-Parser>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/PepXML\-Parser>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/PepXML\-Parser>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/PepXML\-Parser/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2015 Felipe da Veiga Leprevost.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See <http://dev.perl.org/licenses/> for more information.
